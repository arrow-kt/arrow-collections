buildscript {
    ext {
        // Constants
        gradleVersion = '4.4.1'
        gradleVersionsPluginVersion = '0.17.0'
        javaVersion = JavaVersion.VERSION_1_7
        kotlinTestVersion = '2.0.7'
        kotlinVersion = '1.2.51'
        arrowVersion = '0.7.3-SNAPSHOT'
    }

    repositories {
        jcenter()
        maven { url 'https://maven.google.com' }
        maven { url 'https://jitpack.io' }
        maven { url "http://dl.bintray.com/kotlin/kotlin-dev" }
        maven { url "https://dl.bintray.com/jetbrains/markdown/" }
        maven { url "https://dl.bintray.com/arrow-kt/arrow-kt/" }
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.0'
        classpath 'io.arrow-kt:ank-gradle-plugin:0.6.1'
        classpath 'com.android.tools.build:gradle:2.3.3'
    }
}

allprojects {
    apply plugin: 'base'

    repositories {
        jcenter()
        maven { url 'https://maven.google.com' }
        maven { url 'https://kotlin.bintray.com/kotlinx' }
        maven { url "http://dl.bintray.com/kotlin/kotlin-dev" }
        maven { url "http://dl.bintray.com/arrow-kt/arrow-kt" }
        maven { url "https://dl.bintray.com/jetbrains/markdown/" }
        maven { url 'https://jitpack.io' }
        maven { url 'http://oss.jfrog.org/artifactory/oss-snapshot-local' }
    }
}

subprojects { project ->

    group = GROUP
    version = VERSION_NAME

    apply plugin: 'kotlin'

    apply plugin: 'com.jfrog.bintray'
    bintray {
        user = project.hasProperty('bintrayUser') ? project.property('bintrayUser') : System.getenv('BINTRAY_USER')
        key = project.hasProperty('bintrayApiKey') ? project.property('bintrayApiKey') : System.getenv('BINTRAY_API_KEY')
        configurations = ['archives']
        pkg {
            repo = 'arrow-kt'
            name = POM_ARTIFACT_ID
            userOrg = POM_DEVELOPER_ID
            licenses = ['Apache-2.0']
            vcsUrl = 'https://github.com/arrow-kt/arrow-collections.git'
        }
    }

    compileKotlin.kotlinOptions.freeCompilerArgs += ["-Xskip-runtime-version-check"]

    test {
        testLogging {
            events "passed", "skipped", "failed", "standardOut", "standardError"
        }
    }

    tasks.withType(Test) {
        maxParallelForks = Runtime.runtime.availableProcessors()
    }

    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
}

task wrapper(type: Wrapper) {
    distributionUrl = "https://services.gradle.org/distributions/gradle-${project.ext.gradleVersion}-all.zip"
}
